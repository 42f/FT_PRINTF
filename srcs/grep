/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_alpha_manager.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvalette <bvalette@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/12/28 13:45:58 by bvalette          #+#    #+#             */
/*   Updated: 2019/12/31 12:11:55 by bvalette         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libftprintf.h"
#include <stdlib.h>

int		ft_printer_str(t_format *format, char *str_buffer)
{
	int			len;
	int			output_len;
	char		*output_str;

	len = ft_strlen(str_buffer);
	output_str = NULL;
	if (format->pre != -1 && format->pre < len && format->conv != 'c') 
	{
		str_buffer[format->pre] = '\0';
		len = format->pre;
	}
	output_len = len;
	if (format->min_w > len)
	{
		output_str = (char *)ft_calloc(format->min_w + 1, sizeof(char));
		output_len = format->min_w;
	}
	else
		output_str = (char *)ft_calloc(len + 1, sizeof(char));
	if (output_str == NULL)
		return (0);
	if (ft_strnstr(format->flag, "-", 5) != NULL)
	{
		ft_strlcpy(output_str, str_buffer, len + 1);
		ft_memset(output_str + len, ' ', output_len - len);
	}
	else 
	{
		ft_memset(output_str, ' ', output_len - len);
		ft_strlcpy(output_str + (output_len - len), str_buffer, len + 1);
	}
	ft_putstr(output_str);
	free(output_str);
	return (output_len);
}



int		ft_printer_char(t_format *format, unsigned char c)
{
	char		*output_str;
	int			len;
	char		fill;

	if (c == '\0')
		ft_putchar(0);
	fill = ' ';
	if (ft_str_set(format->flag, "0") != 0 && ft_str_set(format->flag, "-") == 0)
		fill = '0';
	len = 1;
	if (format->min_w > 1)
		len = format->min_w;
	output_str = (char *)ft_calloc(len + 1, sizeof(char));
	output_str[0] = c;
	if (format->min_w != -1 && ft_str_set(format->flag, "-") != 0)
	{
		ft_memset(output_str, fill, len);
		if (c == '\0')
			output_str[len - 1] = c;
		else
			output_str[0] = c;
	}
	else if (format->min_w != -1 && ft_str_set(format->flag, "-") == 0)
	{
		ft_memset(output_str, fill, len);
		output_str[len - 1] = c;
	}	
	ft_putstr(output_str);
	free(output_str);
	return (len);
}

/*
** alpha manager is called if format conv is a 's' 'c' or '%'
*/

int		ft_alpha_conv(va_list ap, t_format *format)
{
	int			ret;
	char		*str_buffer;

	ret = 1;
	if (format->conv == '%')
		ft_putchar('%');
	else if (format->conv == 'c')
		ret = ft_printer_char(format, va_arg(ap, int));
	else if (format->conv == 's')
	{
		if (ft_check_va(ap) == -1)
			str_buffer = ft_strdup("(null)");
		else
			str_buffer = ft_strdup(va_arg(ap, char*));
		ret = ft_printer_str(format, str_buffer);
		free(str_buffer);
	}
//print_format(format);
	return (ret);
}


/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_digit_manager.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvalette <bvalette@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/12/25 15:35:18 by bvalette          #+#    #+#             */
/*   Updated: 2020/01/12 11:35:58 by bvalette         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libftprintf.h"
#include <stdlib.h>

//remove
#include <fcntl.h>
#include <unistd.h>
//remove

static void		ft_prefix(t_format *format, char *ret, char *buff, long long nb)
{
	size_t		ret_len;
	size_t		buff_len;

	ret_len = ft_strlen(ret);
	buff_len = ft_strlen(buff);
	if (nb < 0)
		ft_memset(ret, '-', 1);
	else if (nb >= 0 && ft_str_set(format->flag, "+") != 0)
		ft_memset(ret, '+', 1);
	else if (nb >= 0 && ft_str_set(format->flag, " ") != 0)
		ft_memset(ret, ' ', 1);
	ft_memcpy(ret + (ret_len - buff_len), buff, buff_len);
}

static size_t	ft_ret_len(t_format *format, int buffer_len)
{
	size_t		ret_len;
	ret_len = buffer_len;
	if (format->pre > buffer_len)
		ret_len = format->pre;
	else if (format->pre != -1 && format->pre <= buffer_len)
		ret_len = buffer_len;
	else if (ft_str_set(format->flag, "0") != 0
&& format->min_w > buffer_len && ft_str_set(format->flag, "-") == 0 )
		ret_len = format->min_w;
return (ret_len);
}

static char		*ft_pad_buffer(t_format *format, char *buffer, long long nb)
{
	char 		*ret;
	size_t		ret_len;
	int			buffer_len;

	buffer_len = ft_strlen(buffer);
	if (nb < 0 || ft_str_set(format->flag, "+ ") != 0)
	{
		if (nb < 0)
			ft_memmove(buffer, buffer + 1, buffer_len);
		if (nb >= 0)
			buffer_len++;
		if (format->pre != -1)
			format->pre++;
	}
	ret_len = ft_ret_len(format, buffer_len);
	ret = (char *)ft_calloc(ret_len + 1, sizeof(char));
	if (ret == NULL)
		return (NULL);
	ft_memset(ret, '0', ret_len);
	ft_prefix(format, ret, buffer, nb);
	free(buffer);
	return (ret);
}

static char		*ft_zero_padding(t_format *format, char *buffer, long long nb)
{
	char			*padded_ret;
	size_t			buff_len;
	size_t			padd_len;

	buffer = ft_pad_buffer(format, buffer, nb);
	buff_len = ft_strlen(buffer);
	padd_len = buff_len;
	if (format->min_w > (int)buff_len)
		padd_len = format->min_w;
	padded_ret = (char *)ft_calloc(padd_len + 1, sizeof(char));
	if (padded_ret == NULL)
		return (NULL);
	ft_memset(padded_ret, ' ', padd_len);
	if (ft_str_set(format->flag, "-") != 0)
		ft_memcpy(padded_ret, buffer, buff_len);
	else
		ft_memcpy(padded_ret + (padd_len - buff_len), buffer, buff_len + 1);
	free(buffer);
	return (padded_ret);
}

int				ft_num_conv(va_list ap, t_format *format)
{
	int				ret;
	char			*buffer;
	long long int	nb;

	ret = 0;
	if (ft_str_set(format->spec, "l") != 0 || format->conv == 'D')
		nb = va_arg(ap, long long int);
	else if (ft_str_set(format->spec, "h") != 0)
		nb = (short int)va_arg(ap, int);
	else
		nb = (int)va_arg(ap, long long int);
	buffer = ft_itoa(nb);
	if (buffer == NULL)
		return (-1);
	if (nb == 0 && format->pre == 0)
		buffer[0] = '\0';
	buffer = ft_zero_padding(format, buffer, nb);
	ft_putstr(buffer);
	ret = ft_strlen(buffer);
	free(buffer);
	return (ret);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_hex_manager.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvalette <bvalette@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/12/28 13:46:56 by bvalette          #+#    #+#             */
/*   Updated: 2020/01/11 17:40:54 by bvalette         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libftprintf.h"
#include <stdlib.h>

static char	*ft_padding(t_format *format, char *hex_str, int pre, int offset)
{
	char		*padded_ret;
	size_t		padded_len;
	size_t		hex_len;

	hex_len = ft_strlen(hex_str);
	if (pre < 0)
		pre = 0;
	padded_len = hex_len + offset;
	if (format->pre > (int)hex_len) 
		padded_len = pre + offset;
	else if (ft_str_set(format->flag, "0") != 0 && format->pre == -1
	&& format->min_w != -1)
		padded_len = format->min_w;
	padded_ret = (char *)ft_calloc(padded_len + 1, sizeof(char));
	if (padded_ret == NULL)
		return (NULL);
	ft_memset(padded_ret, ' ', padded_len);
	if (ft_str_set(format->flag, "0") != 0 || format->pre > (int)hex_len)
		ft_memset(padded_ret, '0', padded_len);
	if (offset == 2)
		ft_memcpy(padded_ret, "0x", 2);
	ft_memcpy(padded_ret + (padded_len - hex_len), hex_str, hex_len);
	free(hex_str);
	return (padded_ret);
}

static char	*ft_p_pre_padding(t_format *format, char *hex_str)
{
	int			offset;

	offset = 2;
	if (hex_str[0] == '0' && format->pre == 0)
		ft_memset(hex_str, '\0', ft_strlen(hex_str));
	return (ft_padding(format, hex_str, format->pre, offset));
}

static char	*ft_x_pre_padding(t_format *format, char *hex_str)
{
	int			offset;

	offset = 0;
	if (hex_str[0] == '0')
	{
		if (format->pre == 0)
			ft_memset(hex_str, '\0', ft_strlen(hex_str));
	}
	else if (ft_str_set(format->flag, "#") != 0)
		offset = 2;
	return (ft_padding(format, hex_str, format->pre, offset));
}

static void	ft_str_toupper(char *str)
{
	while (*str != '\0')
	{
		if (*str >= 'a' && *str <= 'z')
			*str -= 32;
		str++;
	}
}

static int	ft_put_hex(t_format *format, char *hex_str, char c_fill)
{
	char	*output_str;
	size_t	out_len;
	size_t	in_len;

	if (hex_str == NULL)
		return (-1);
	in_len = ft_strlen(hex_str);
	out_len = in_len;
	if (format->min_w > (int)in_len)
		out_len = format->min_w;
	output_str = (char *)ft_calloc(out_len + 1, sizeof(char));
	if (output_str == NULL)
		return (-1);
	ft_memset(output_str, c_fill, out_len);
	if (ft_str_set(format->flag, "-") != 0)
		ft_memcpy(output_str, hex_str, in_len);
	else
		ft_memcpy(output_str + (out_len - in_len), hex_str, in_len + 1);
	if (format->conv == 'X')
		ft_str_toupper(output_str);	
	ft_putstr(output_str);
	free(output_str);
	return (out_len);
}

static char	ft_set_cfill(t_format *format)
{
	char	c_fill;
	
	c_fill = ' ';
	if (format->conv == 'p')
		return (c_fill);
	if (ft_str_set(format->flag, "0") != 0)
		c_fill = '0';
	if (ft_str_set(format->flag, "#") != 0)
		c_fill = ' ';
	if (format->pre != -1 && format->pre < format->min_w)
		c_fill = ' ';
	if (ft_str_set(format->flag, "-") != 0)
		c_fill = ' ';
	return (c_fill);
}

int			ft_hex_conv(va_list ap, t_format *format)
{
	int			ret;
	char		*nb_str;
	char		c_fill;

	ret = 0;
	if (format->conv == 'p' || ft_str_set(format->spec, "lzj") != 0)
		nb_str = ft_itoa_base_ptr(va_arg(ap, uintptr_t), "0123456789abcdef");
	else if (ft_str_set(format->spec, "h") != 0)
	{
		if (ft_strncmp(format->spec, "hh", 3) == 0)
			nb_str = ft_itoa_base_ptr((unsigned char)va_arg(ap, unsigned int), "0123456789abcdef");
		else if (ft_strncmp(format->spec, "h", 2) == 0) 
			nb_str = ft_itoa_base_ptr((unsigned short)va_arg(ap, unsigned int), "0123456789abcdef");
	}
	else if (ft_str_set(format->spec, "l") != 0)
			nb_str = ft_itoa_base_ptr(va_arg(ap, unsigned long long int), "0123456789abcdef");
	else
		nb_str = ft_itoa_base(va_arg(ap, unsigned int), "0123456789abcdef");
	if (format->conv == 'p')
		nb_str = ft_p_pre_padding(format, nb_str);
	else
		nb_str = ft_x_pre_padding(format, nb_str);
	c_fill = ft_set_cfill(format);
	ret = ft_put_hex(format, nb_str, c_fill);
	free(nb_str);
	return (ret);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_percent_manager.c                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvalette <bvalette@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/12/28 13:45:58 by bvalette          #+#    #+#             */
/*   Updated: 2019/12/31 10:14:54 by bvalette         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libftprintf.h"
#include <stdlib.h>

/*
** alpha manager is called if format conv is a 's' 'c' or '%'
*/

int		ft_percent_conv(t_format *format)
{
	int			ret;

	ret = 1;
	if (format->pre == -1 && format->min_w == -1)
		ft_putchar('%');
	else
		ret = ft_printer_char(format, '%');
//print_format(format);
	return (ret);
}


/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvalette <bvalette@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/12/13 09:48:03 by bvalette          #+#    #+#             */
/*   Updated: 2020/01/12 11:25:57 by bvalette         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libftprintf.h"
#include <stdlib.h>
#include <stdarg.h>

int		ft_next_arg(va_list ap, t_format *format, int main_ret)
{
	int			ret;

	ret = 0;
	if (ft_char_set(format->conv, "%") != 0)
		ret = ft_percent_conv(format);
	else if (ft_char_set(format->conv, "sc") != 0)
		ret = ft_alpha_conv(ap, format);
	else if (ft_char_set(format->conv, "Ddi") != 0)
		ret = ft_num_conv(ap, format);
	else if (ft_char_set(format->conv, "Uu") != 0)
		ret = ft_unsigned_conv(ap, format);
	else if (ft_char_set(format->conv, "pxX") != 0)
		ret = ft_hex_conv(ap, format);
	else if (format->conv == 'n')
		ret = ft_n_conv(ap, main_ret);
	free(format);
	return(ret);
}

void		ft_spec_parser(char *arg, t_format *format)
{
	while (*arg != '\0' && format->conv == '\0')
	{
		if (ft_char_set(*arg, "lhzj") != 0)
			ft_fill_spec(format, *arg);
		arg++;
	}
}

void		ft_conv_parser(char *arg, t_format *format)
{
	while (*arg != '\0' && format->conv == '\0')
	{
		if (ft_char_set(*arg, "UDncspdiuxX%") != 0)
			format->conv = *arg;
		arg++;
	}
}

void		ft_flag_parser(char *arg, t_format *format)
{
	while (*arg != '\0' && ft_char_set(*arg,"0-+ #") != 0)
	{
		ft_fill_flag(format, *arg);
		arg++;
	}
}

int			ft_arg_trim(char *arg)
{
	int			i;
	int 		ret;

	i = 0;
	ret = -1;
	while (arg[i] != '\0')
	{
		if ((ft_isalpha(arg[i]) == 1 || arg[i] == '%') 
			&& ft_char_set(arg[i], "hlzj") == 0)
		{
			arg[i + 1] = '\0';
			ret = 1;
			break;
		}
		i++;
	}
	if (ft_char_set(arg[i], "UDncspdiuxX%") == 0)
	{
		ret = -1;
		free(arg);
	}
	return (ret);
}

static void	ft_wildcard_arg(va_list ap, t_format *format, int type)
{
	int			wildcard_arg;

	wildcard_arg = 0;
	if (type == 1)
	{
		wildcard_arg = va_arg(ap, int);
		if (wildcard_arg < 0)
		{
			wildcard_arg = -wildcard_arg;
			ft_fill_flag(format, '-');
		}
		format->min_w = wildcard_arg;
	}
	else if (type == 2)
	{
		wildcard_arg = va_arg(ap, int);
		if (wildcard_arg < 0)
			wildcard_arg = -wildcard_arg;
		format->pre = wildcard_arg;
	}
}

int		ft_format_parser(va_list ap, char *arg, t_format *format)
{
	char 		*precision_ptr;
	char 		*min_width;

	if (ft_arg_trim(arg) == -1)
		return (-1);	
	min_width = ft_str_set(arg, "123456789*.");
	if (min_width != NULL && *min_width != '*' && *min_width != '.')
		format->min_w = ft_atoi(min_width);
	else if (min_width != NULL && *min_width == '*' && *min_width != '.')
		ft_wildcard_arg(ap, format, 1);
	precision_ptr = ft_str_set(arg, ".");
	if (precision_ptr != NULL && precision_ptr[1] != '*')
		format->pre = ft_atoi(precision_ptr + 1);
	else if(precision_ptr != NULL && precision_ptr[1] == '*')
		ft_wildcard_arg(ap, format, 2);
	ft_flag_parser(arg, format);
	ft_spec_parser(arg, format);
	ft_conv_parser(arg, format);
	free(arg);
	return (0);
}


int		ft_arg_manager(va_list ap, char *arg, t_format *format)
{
	int			ret;

	ret = 0;
	while (*arg != '\0')
	{
		if (*arg == '%')
		{
			arg++;
			if (ft_char_set(*arg, "0123456789 -*+#'.UDncspdiuxX%lhzj") == 0)
				continue ;
			format = ft_format_init();
			if (format == NULL
			|| ft_format_parser(ap, ft_strdup(arg), format) == -1)
				return (-1);
			ret += ft_next_arg(ap, format, ret); 
			while (*arg != '\0' && ft_char_set(*arg, "UDncspdiuxX%") == 0)
				arg++;
		}
		else
			ret += ft_putchar(*arg);
		arg++;
	}
	return (ret);
}

int				ft_check_va(va_list ap)
{
	va_list ap_tmp;
	char	*str_tmp;
	int		ret;

	ret = 1;
	va_copy(ap_tmp, ap);
	str_tmp = va_arg(ap_tmp, char*);
	if (str_tmp == NULL)
	{
		va_arg(ap, char*);
		ret = -1;
	}
	va_end(ap_tmp);
	return (ret);
}

int				ft_printf(const char *arg, ...)
{
	int 		ret;
	va_list 	ap;
	t_format	*format;

	ret = 0;
	format = NULL;
	if (arg == NULL)
		return (0);
	if (ft_strchr(arg, '%') == NULL)
	{
		ft_putstr((char *)arg);
		return(ft_strlen(arg));
	}
	va_start(ap, arg);
	ret = ft_arg_manager(ap, (char *)arg, format);
	va_end(ap);
	return (ret);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_printf_utils.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvalette <bvalette@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/12/13 09:48:03 by bvalette          #+#    #+#             */
/*   Updated: 2019/12/29 21:43:35 by bvalette         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libftprintf.h"
#include <stdlib.h>
#include <stdarg.h>

int		ft_printer_str(t_format *format, char *str_buffer);

//toremove
//
/*
void *xmalloc(size_t n, size_t size)
 {
	int r = rand() % 200;      // Returns a pseudo-random integer between 0 and RAND_MAX.
	int alloc_number = 0;
	int fail_after = r;

	if (fail_after > 0 && r < 100)
 	{
 		printf("MALLOC FAIL @ the malloc number = [%d]{r = %d}\n", alloc_number, r);
		r = rand() % 30; 
		alloc_number++;
 		return NULL;
 	}
 	alloc_number++;

 	return ft_calloc(n, size);
 }
 #define ft_calloc(x, y) xmalloc(x, y)
*/
void	print_format(t_format *format)
{
	if (format == NULL)
		return ;
	printf("\n\n========= FORMAT =========\n");
	printf("flag  = |%s|\n", format->flag);
	printf("min_w = |%d|\n", format->min_w);
	printf("pre   = |%d|\n", format->pre);
	printf("spec  = |%s|\n", format->spec);
	printf("conv  = |%c|\n", format->conv);
	//	system ("leaks a.out");
	printf("\n===== [END FORMAT] ======\n");

}
//
// REMOVE ABOVE


t_format	*ft_format_init(void)
{
	t_format	*new_format;

	new_format = (t_format*)malloc(sizeof(t_format) * 1);
	if (new_format== NULL)
		return (NULL);
	ft_memset(new_format->flag, '\0', 6);
	new_format->min_w = -1;
	new_format->pre = -1;
	ft_memset(new_format->spec, '\0', 3);
	new_format->conv = '\0';
	return (new_format);
}

void		ft_fill_spec(t_format *format, char c)
{
	int			i;

	i = 0;
	while (i <= 2)
	{
		if (format->spec[i] == 0)
		{
			format->spec[i] = c;
			return ;
		}
		i++;
	}
}

void		ft_fill_flag(t_format *format, char c)
{
	int			i;
	i = 0;
	while (i <= 4)
	{
		if (format->flag[i] == 0 && ft_char_set(c, format->flag) == 0)
		{
			format->flag[i] = c;
			return ;
		}
		i++;
	}
}

char		*ft_str_set(char* str, char *set)
{
	int			i;
	int			y;

	i = 0;
	y = 0;

	while (str[y] != '\0')
	{
		while (set[i] != '\0')
		{
			if (str[y] == set[i])
				return (str + y);
			i++;
		}
		i = 0;
		y++;
	}
	return (0);
}

char		ft_char_set(char c, char *set)
{
	int			i;

	i = 0;
	while (set[i] != '\0')
	{
		if (c == set[i])
			return (c);
		i++;
	}
	return (0);
}

int		ft_n_conv(va_list ap, int ret)
{
	int		*int_arg;

	int_arg = va_arg(ap, int *);
	*int_arg = ret;
	return (0);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_unsigned_manager.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvalette <bvalette@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/12/25 15:35:18 by bvalette          #+#    #+#             */
/*   Updated: 2020/01/09 09:13:50 by bvalette         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libftprintf.h"
#include <stdlib.h>


static char	*ft_zero_padding(t_format *format, char *buffer)
{
	char		*padded_ret;
	size_t		buffer_len;
	size_t		padded_len;

	buffer_len = ft_strlen(buffer);
	padded_len = buffer_len;
	if (format->pre > (int)buffer_len)
		padded_len = format->pre;
	padded_ret = (char *)ft_calloc(padded_len + 1, sizeof(char));
	if (padded_ret == NULL)
		return (NULL);
	if (format->pre > (int)buffer_len)
	{
		ft_memset(padded_ret, '0', padded_len);
		ft_memcpy(padded_ret + (padded_len - buffer_len), buffer, buffer_len);
	}
	else
		ft_memcpy(padded_ret, buffer, buffer_len);
	free(buffer);
	return (padded_ret);
}

static int		ft_printer_nbr(t_format *format, char *padded_buff)
{
	size_t		buff_len;
	size_t		output_len;
	char		*output_str;
	char		c_fill;

	buff_len = ft_strlen(padded_buff);
	output_len = buff_len;
	if (format->min_w > (int)buff_len)
		output_len = format->min_w;
	output_str = (char *)ft_calloc(output_len + 1, sizeof(char));
	if (output_str == NULL)
		return (0);
	c_fill = ' ';
	if (ft_str_set(format->flag, "0") != 0) 
		c_fill = '0';
	if (format->pre != -1 && format->pre < format->min_w)
		c_fill = ' ';
	ft_memset(output_str, c_fill, output_len);
	if (ft_str_set(format->flag, "-") != 0)
		ft_memcpy(output_str, padded_buff, buff_len);
	else 
		ft_memcpy(output_str + (output_len - buff_len), padded_buff, buff_len);
	ft_putstr(output_str);
	free(padded_buff);
	free(output_str);
	return (output_len);
}

int		ft_unsigned_conv(va_list ap, t_format *format)
{
	int				ret;
	char			*buffer;
	unsigned long long int	nb;

	buffer = NULL;
	ret = 0;
	if (ft_str_set(format->spec, "lz") != 0)
		nb = va_arg(ap, unsigned long long int);
	else
		nb = va_arg(ap, unsigned int);
	buffer = ft_itoa_ulong(nb);
	if (buffer == NULL)
		return (-1);
	if (nb == 0 && format->min_w == -1)
	{
		buffer[0] = '0';
		buffer = ft_zero_padding(format, buffer);
		ret = ft_printer_str(format, buffer);
		return (ret);
	}
	buffer = ft_zero_padding(format, buffer);
	ret = ft_printer_nbr(format, buffer);
	return (ret);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_digit_manager.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvalette <bvalette@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2019/12/25 15:35:18 by bvalette          #+#    #+#             */
/*   Updated: 2020/01/09 09:56:33 by bvalette         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libftprintf.h"
#include <stdlib.h>

static void	ft_padder(int pre, int len, int offset, char *padded_ret, char *buf)
{ 
	if (pre > len)
	{
		ft_memset(padded_ret + offset, '0', pre - len + offset);
		ft_strlcpy(padded_ret + (pre - len), buf, len + 1);
	}
	else
		ft_strlcpy(padded_ret + offset, buf, len + 1);
}

static char	*ft_zero_padding(t_format *format, char *buffer, int nb, int pre)
{
	char			*padded_ret;
	int				len;
	int				offset;

	len = ft_strlen(buffer);
	offset = 0;
	if (nb < 0 || ft_str_set(format->flag, "+ 0") != 0) 
	{
		if (nb < 0 && pre >= len)
			buffer[0] = '0';
		len += 1;
		pre += 2;
		offset = 1;
	}
	padded_ret = (char *)ft_calloc(len + pre + offset + 1, sizeof(char));
	if (nb < 0 && pre > len)
		ft_memset(padded_ret, '-', 1);
	else if (nb >= 0 && ft_str_set(format->flag, "+") != 0)
		ft_memset(padded_ret, '+', 1);
	else if (nb >= 0 && ft_str_set(format->flag, " ") != 0)
		ft_memset(padded_ret, ' ', 1);
	else
		offset = 0;	
	ft_padder(pre, len, offset, padded_ret, buffer);
	free(buffer);
	return (padded_ret);
}

static char	*ft_pre_padding(t_format *format, char *buffer, int nb)
{
	int				pre;

	pre = 0;
	if (ft_str_set(format->flag, "0") != 0 &&
format->pre == -1 && ft_str_set(format->flag, "-") == 0)
		pre = format->min_w - 1;
	else if (format->pre != -1)
		pre = format->pre;
	return (ft_zero_padding(format, buffer, nb, pre));
}

static int		ft_putnum(t_format *format, char *padded_buff, char *output_str)
{
	size_t			output_len;
	size_t			len;
	int				nb;
	int				offset;

	nb = ft_atoi(padded_buff);
	if (output_str == NULL)
		return (0);
	output_len = ft_strlen(output_str);
	len = ft_strlen(padded_buff);
	offset = 0;
	if (ft_str_set(format->flag, "+ ") != 0)
		offset = 1;
	ft_putstr(output_str);
	free(output_str);
	free(padded_buff);
	return (output_len);
}

static int		ft_printer_nbr(t_format *format, char *padded_buff, int nb)
{
	size_t			len;
	size_t			output_len;
	char			*output_str;

	len = ft_strlen(padded_buff);
	output_len = len;
	if (format->min_w > (int)len)
		output_len = format->min_w;
	output_str = (char *)ft_calloc(output_len + 1, sizeof(char));
	ft_memset(output_str, ' ', output_len);
	if (ft_str_set(format->flag, "0") != 0 && nb < 0 && format->pre > (int)len)
		ft_memset(output_str , '0', output_len);
	if (ft_str_set(format->flag, "-") != 0 && output_str != NULL)
	{
		ft_strlcpy(output_str, padded_buff, len + 1);
		ft_memset(output_str + len, ' ', output_len - len);
	}	
	else if (output_str != NULL)
		ft_strlcpy(output_str + output_len - len, padded_buff, output_len + 1);
	return (ft_putnum(format, padded_buff, output_str));	
}

int		ft_num_conv(va_list ap, t_format *format)
{
	int				ret;
	char			*buffer;
	long int		nb;

	ret = 0;
	if (ft_str_set(format->spec, "l") != 0 || format->conv == 'D')
		nb = va_arg(ap, long int);
	else
		nb = va_arg(ap, int);
	buffer = ft_itoa(nb);
	if (buffer == NULL)
		return (-1);
	if (nb == 0 && (format->pre == 0 || format->min_w == -1))
	{
		buffer[0] = '\0';
		if (format->pre == -1 && format->min_w == -1)
			buffer[0] = '0';
		format->pre = 0;
	}
	buffer = ft_pre_padding(format, buffer, nb);
	ret = ft_printer_nbr(format, buffer, nb);
	return (ret);
}

