				format->min_w = ft_atoi(arg + y);
				format->pre = ft_atoi(arg + y);
			format = ft_format_parser(ap, arg + i);
			ft_fill_flag(format, arg[y]);
			ft_putchar(arg[i]);
			ret += ft_next_arg(ap, format);
			while (arg[i] != '\0' && ft_char_set(arg[i], "cspdiuxX%") == 0)
		else if ((conv = ft_char_set(arg[y], "cspdiuxX%")) != 0)
		else if (ft_char_set(arg[y], "0123456789*") != 0 &&
		ft_memset(output_str + len, ' ', output_len - len);
		ft_memset(output_str + len, ' ', output_len - len);
		ft_memset(output_str + offset, '\0', 1);
		ft_memset(output_str, ' ', output_len - len);
		ft_memset(output_str, ' ', output_len - len);
		ft_memset(output_str, ' ', output_len);
		ft_memset(padded_ret + i, '0', precision - len);
		ft_memset(padded_ret, ' ', 1);
		ft_memset(padded_ret, '+', 1);
		ft_memset(padded_ret, '-', 1);
		ft_putchar('%');
		ft_putchar(c);
		ft_putnbr(int_buffer);
		ft_putnbr_base(va_arg(ap, int), "0123456789ABCDEF");
		ft_putnbr_base(va_arg(ap, int), "0123456789abcdef");
		ft_putnbr_base(va_arg(ap, unsigned long long int), "0123456789abcdef");
		ft_putstr("0x");
		ft_putstr((char *)arg);
		ft_strlcpy(output_str + (output_len - len), str_buffer, len + 1);
		ft_strlcpy(output_str + output_len - len, padded_buff, output_len + 1);
		ft_strlcpy(output_str, padded_buff, len + 1);
		ft_strlcpy(output_str, str_buffer, len + 1);
		ft_strlcpy(padded_ret + (precision - len), str_buffer, len + 1);
		ft_strlcpy(padded_ret + i, str_buffer, len + 1);
		if (ft_str_set(format->flag, "+- ") != 0)
		if (ft_strncmp(format->flag, "", 5) == 0)
		if (y <= 5 && ft_char_set(arg[y], "-+'#0 ") != 0 &&
		output_str = (char *)ft_calloc(format->min_w + 1, sizeof(char));
		output_str = (char *)ft_calloc(len + 1, sizeof(char));
		ret = ft_alpha_conv(ap, format);
		ret = ft_hex_conv(ap, format);
		ret = ft_num_conv(ap, format);
		ret = ft_printer_char(format, va_arg(ap, int));
		ret = ft_printer_nbr(format, str_buffer);
		ret = ft_printer_str(format, str_buffer);
		return(ft_strlen(arg));
		str_buffer = ft_itoa(va_arg(ap, int));
		str_buffer = ft_strdup(va_arg(ap, char*));
	else if (ft_char_set(format->conv, "di") != 0)
	else if (ft_char_set(format->conv, "diu") != 0)
	else if (ft_char_set(format->conv, "pxX") != 0)
	else if (nb >= 0 && ft_strnstr(format->flag, " ", 5) != NULL)
	else if (nb >= 0 && ft_strnstr(format->flag, "+", 5) != NULL)
	format = ft_format_init();
	ft_putstr(output_str);
	ft_putstr(output_str);
	if (ft_char_set(format->conv, "sc%") != 0)
	if (ft_strchr(arg, '%') == NULL)
	if (ft_strnstr(format->flag, "+", 5) != NULL || ft_strnstr(format->flag, " ", 5) != NULL)
	if (ft_strnstr(format->flag, "-", 5) != NULL && output_str != NULL)
	if (ft_strnstr(format->flag, "-", 5) != NULL)
	if (nb < 0 || ft_strnstr(format->flag, "+", 5) != NULL || ft_strnstr(format->flag, " ", 5) != NULL)
	len = ft_strlen(padded_buff);
	len = ft_strlen(padded_buff);
	len = ft_strlen(str_buffer);
	len = ft_strlen(str_buffer);
	nb = ft_atoi(padded_buff);
	output = ft_printer_str(format, output_str);
	output_len = ft_strlen(output_str);
	output_str = (char *)ft_calloc(2, sizeof(char));
	output_str = (char *)ft_calloc(output_len + 1, sizeof(char));
	padded_buff = ft_zero_padding(format, str_buffer, ft_atoi(str_buffer));
	padded_ret = (char *)ft_calloc(len + precision + i, sizeof(char));
	ret = ft_str_manager(ap, arg);
	return (ft_putnum(format, padded_buff, output_str));	
 	return ft_calloc(n, size);
 #define ft_calloc(x, y) xmalloc(x, y)
/*   ft_printf.c                                        :+:      :+:    :+:   */
//		char_buffer = (char *)ft_calloc(2, sizeof(char));




char		*ft_zero_padding(t_format *format, char *str_buffer, int nb);
char		ft_char_set(char c, char *set);
char		ft_str_set(char* str, char *set);
int			ft_printf(const char *arg, ...);
int			ft_alpha_conv(va_list ap, t_format *format);
int			ft_hex_conv(va_list ap, t_format *format);
int			ft_next_arg(va_list ap, t_format *format);
int			ft_num_conv(va_list ap, t_format *format);
int			ft_printer_char(t_format *format, unsigned char c);
int			ft_printer_nbr(t_format *format, char *str_buffer);
int			ft_printer_str(t_format *format, char *str_buffer);
int			ft_printer_str(t_format *format, char *str_buffer);;
int			ft_putnum(t_format *format, char *padded_buff, char *output_str);
int			ft_str_manager(va_list ap, const char *arg);
t_format	*ft_format_init(void);
t_format	*ft_format_parser(va_list ap, const char *arg);
void		ft_fill_flag(t_format *format, char c);
